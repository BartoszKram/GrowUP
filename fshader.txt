#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 normals;
in vec4 vN; //interpolowany wektor normalny w przestrzeni oka
in vec4 vV; //interpolowany wektor do obserwatora w przestrzeni oka
in vec4 vL; //interpolowany wektor do zrodla swiatla w przestrzeni oka
in vec4 iC; //interpolowany kolor wierzcholka

// Ouput data
out vec4 pixelColor;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;

void main(){
	vec4 mN=normalize(vN); //normalizuj interpolowany wektor normalny w przestrzeni oka
	vec4 mL=normalize(vL); //normalizuj interpolowany wektor do obserwatora w przestrzeni oka
	vec4 mV=normalize(vV); //normalizuj interpolowany wektor do zrodla swiatla w przestrzeni oka
	vec4 mR=reflect(-mL,mN); //oblicz wektor odbity w przestrzeni oka

	vec4 Ma=vec4(0,0,0,1); //Kolor materialu dla swiatla otoczenia
	vec4 La=vec4(0,0,0,1); //Kolor swiatla otoczenia
		//vec4 Md=iC; //Kolor materialu dla swiatla rozproszonego
	vec4 Md = texture(myTextureSampler, UV); // diffuse
	vec4 Ld=vec4(1,1,1,1); //Kolor swiatla rozpraszanego
	vec4 Ms=vec4(1,1,1,1); //Kolor materialu dla swiatla odbitego
		//Ms=texture(textureMap1, iTexCoord); // specular
		//Ms = vec4(1,1,1,1);
		//Md=texture(textureMap0, UV);
	vec4 Ls=vec4(1,1,1,1); //Kolor swiatla odbijanego
	float shininess=150; //Polyskliwosc materialu

	float nl=max(0,dot(mN,mL)); //Oblicz czlon Lamberta
	float rv=pow(max(0,dot(mN,mL)),shininess); //Oblicz czlon Phonga
    // Output color = color of the texture at the specified UV
    pixelColor=Ma*La+Md*Ld*nl+Ms*Ls*rv;
}