#version 330

//Zmienne interpolowane
in vec2 UV;
in vec3 normals;
in vec4 vN; //interpolowany wektor normalny w przestrzeni oka
in vec4 vV; //interpolowany wektor do obserwatora w przestrzeni oka
in vec4 vL; //interpolowany wektor do zrodla swiatla w przestrzeni oka
in vec4 Ma; //Kolor materialu dla swiatla otoczenia
in vec4 SunColor;
in vec4 vS;
//Output data
out vec4 pixelColor; //Zmienna wyjsciowa fragment shadera. Zapisuje sie do niej ostateczny (prawie) kolor piksela

//Zmienne jednorodne
uniform sampler2D tex0; //zmienna reprezentujaca jednostke teksturuj¹c¹
uniform int relLevel;

void main(void) {
	vec4 mN=normalize(vN); //normalizuj interpolowany wektor normalny w przestrzeni oka
	vec4 mL=normalize(vL); //normalizuj interpolowany wektor do obserwatora w przestrzeni oka
	vec4 mV=normalize(vV); //normalizuj interpolowany wektor do zrodla swiatla w przestrzeni oka
	vec4 mR=reflect(-mL,mN); //oblicz wektor odbity w przestrzeni oka
	
	vec4 La=vec4(1,1,1,1); //Kolor swiatla otoczenia
	
	vec4 Md=texture(tex0,UV); //Kolor materialu dla swiatla rozproszonego
	vec4 Ld=vec4(1,1,1,1); //Kolor swiatla rozpraszanego
	
	vec4 Ls=vec4(1,1,1,1); //Kolor materialu dla swiatla odbitego
	vec4 Ms=(relLevel*texture(tex0,UV)+vec4(1,1,1,1))/4; //Kolor swiatla odbijanego
	float shininess=50; //Polyskliwosc materialu
	
	float nl=max(0,dot(mN,mL)); //Oblicz czlon Lamberta
	float rv=pow(max(0,dot(mN,mL)),shininess); //Oblicz czlon Phonga
	
	float nl1=max(0,dot(mN,vS));
	float rv1=pow(max(0,dot(mN,vS)),shininess);

	pixelColor=Ma*La+(Md*Ld*nl+Ms*Ls*rv+Md*SunColor*nl1+Ms*SunColor*rv1)/2; //Oblicz model oswietlenia i zwroc jako kolor piksela
}
